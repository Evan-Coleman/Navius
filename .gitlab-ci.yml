image: rust:latest

variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo
  CARGO_TERM_COLOR: always
  # Optimize CI builds with sparse registry
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  MDBOOK_VERSION: "0.4.36"
  # Add cargo build optimizations for CI
  CARGO_BUILD_JOBS: 4  # Parallel compilation jobs - adjust based on CI runner specs
  CARGO_INCREMENTAL: 0  # Disable incremental builds in CI (full builds are better for CI)
  RUSTFLAGS: "-C target-cpu=native"  # Optimize for CI machine
  RUST_BACKTRACE: 1  # Better error reporting

# Define a cache template
.cargo-cache:
  cache:
    key:
      files:
        - Cargo.lock
    paths:
      - .cargo/
      - target/
      # Cache generated API code
      - target/generated/

# Define common setup for Rust jobs
.rust-setup:
  before_script:
    - apt-get update
    - apt-get install -y clang llvm-dev libclang-dev lld jq
    # Set linker to use clang directly instead of lld
    - mkdir -p .cargo
    - echo '[target.x86_64-unknown-linux-gnu]' > .cargo/config.toml
    - echo 'linker = "clang"' >> .cargo/config.toml
    - echo 'rustflags = ["-C", "link-arg=-fuse-ld=gold"]' >> .cargo/config.toml
    # Generate API clients before compilation
    - mkdir -p target/generated
    - chmod +x .devtools/scripts/regenerate_api.sh
    - ./.devtools/scripts/regenerate_api.sh || echo "API generation failed, will be retried during build"

stages:
  - test
  - lint
  - coverage
  - docs
  - build
  - deploy

# Basic test job
test:
  stage: test
  extends: 
    - .cargo-cache
    - .rust-setup
  script:
    - rustc --version
    - cargo --version
    - cargo test --all-features
  artifacts:
    paths:
      - target/debug/
      - target/generated/
    expire_in: 1 day

# Linting job (formatting and clippy)
lint:
  stage: lint
  extends: 
    - .cargo-cache
    - .rust-setup
  script:
    - rustup component add rustfmt clippy
    - cargo fmt -- --check
    - cargo clippy -- -D warnings

# Code coverage job
coverage:
  stage: coverage
  extends: 
    - .cargo-cache
    - .rust-setup
  script:
    - bash .devtools/scripts/coverage.sh
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
    paths:
      - cobertura.xml
      - .devtools/coverage/
    expire_in: 1 week
  # Add coverage visualization to merge requests
  coverage: '/^\d+.\d+% coverage/'

# Documentation validation job
docs:
  stage: docs
  image: node:latest
  before_script:
    - apt-get update && apt-get install -y python3 python3-pip jq
    - pip3 install pyyaml
  script:
    - chmod +x .devtools/scripts/validate_docs.sh
    - chmod +x .devtools/scripts/doc-overhaul/comprehensive_test.sh
    - chmod +x .devtools/scripts/doc-overhaul/generate_report.sh
    - export CI_MODE=true
    - bash .devtools/scripts/validate_docs.sh
  artifacts:
    paths:
      - doc_validation_report.txt
      - target/reports/docs_validation/
    expire_in: 1 week
    when: always
  rules:
    - changes:
      - docs/**/*
      - .devtools/scripts/validate_docs.sh
      - .devtools/scripts/validate_frontmatter.py
      - .devtools/scripts/doc-overhaul/**/*
      - .devtools/config/markdownlint.json

# Documentation quality report job (not run in CI, but available for manual execution)
docs:quality-report:
  stage: docs
  image: node:latest
  before_script:
    - apt-get update && apt-get install -y python3 python3-pip pandoc jq
    - pip3 install pyyaml
  script:
    - chmod +x .devtools/scripts/doc-overhaul/generate_report.sh
    - chmod +x .devtools/scripts/doc-overhaul/comprehensive_test.sh
    - bash .devtools/scripts/doc-overhaul/generate_report.sh
  artifacts:
    paths:
      - target/reports/docs_validation/
    expire_in: 2 weeks
  when: manual

# Build release binaries
build:
  stage: build
  extends: 
    - .cargo-cache
    - .rust-setup
  script:
    - cargo build --release
  artifacts:
    paths:
      - target/release/navius
      - target/generated/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_TAG

# Only run the pipeline on main branch and merge requests
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

# Job to build and deploy documentation
pages:
  image: rust:latest
  extends:
    - .rust-setup
  stage: docs
  before_script:
    - apt-get update
    - apt-get install -y clang llvm-dev libclang-dev jq
    - cargo install mdbook --version ${MDBOOK_VERSION}
  script:
    - cd docs
    - mdbook build
    - cd ..
    - mv target/book public  # GitLab Pages expects the content to be in a 'public' directory
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "master"  # Only deploy on master branch
  cache:
    paths:
      - .cargo
      - target/ 