openapi: 3.0.3
info:
  title: Rust Backend API
  description: |
    API documentation for the Rust Backend service.
    This is a template - replace with your own API documentation.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:3000
    description: Local development server
paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the current health status of the API
      tags:
        - health
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
  
  /docs:
    get:
      summary: API Documentation UI
      description: Swagger UI for interactive API documentation
      tags:
        - documentation
      responses:
        '200':
          description: Swagger UI HTML page
          content:
            text/html:
              schema:
                type: string
  
  /docs/openapi.yaml:
    get:
      summary: OpenAPI Specification
      description: OpenAPI specification in YAML format
      tags:
        - documentation
      responses:
        '200':
          description: OpenAPI specification file
          content:
            text/yaml:
              schema:
                type: string
        '404':
          description: Specification file not found
          content:
            text/plain:
              schema:
                type: string
  
  /actuator/health:
    get:
      summary: Detailed health check endpoint
      description: Returns detailed health information about the API and its dependencies
      tags:
        - health
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /actuator/info:
    get:
      summary: Info endpoint
      description: Returns information about the application
      tags:
        - actuator
      responses:
        '200':
          description: Application information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /pet/{id}:
    get:
      summary: Get pet by ID
      description: Returns a pet by ID
      tags:
        - pets
      parameters:
        - name: id
          in: path
          description: ID of the pet to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Pet found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /read/pet/{id}:
    get:
      summary: Get pet by ID (read-only authenticated endpoint)
      description: Returns a pet by ID, requiring read-only authentication
      tags:
        - pets
      parameters:
        - name: id
          in: path
          description: ID of the pet to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Pet found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /full/pet/{id}:
    get:
      summary: Get pet by ID (full access authenticated endpoint)
      description: Returns a pet by ID, requiring full access authentication
      tags:
        - pets
      parameters:
        - name: id
          in: path
          description: ID of the pet to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Pet found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    HealthCheckResponse:
      type: object
      properties:
        status:
          type: string
          description: The status of the service
          example: "healthy"
        version:
          type: string
          description: The version of the service
          example: "0.1.0"
        uptime_seconds:
          type: integer
          description: The uptime of the service in seconds
          example: 3600
        dependencies:
          type: array
          description: List of dependencies and their status
          items:
            $ref: '#/components/schemas/DependencyStatus'
    
    DetailedHealthResponse:
      type: object
      properties:
        status:
          type: string
          description: The status of the service
          example: "healthy"
        version:
          type: string
          description: The version of the service
          example: "0.1.0"
        uptime_seconds:
          type: integer
          description: The uptime of the service in seconds
          example: 3600
        environment:
          type: string
          description: The current environment of the service
          example: "development"
        dependencies:
          type: array
          description: List of dependencies and their status
          items:
            $ref: '#/components/schemas/DependencyStatus'
    
    InfoResponse:
      type: object
      properties:
        status:
          type: string
          description: The status of the info service
          example: "ok"
        entries:
          type: array
          description: Information entries
          items:
            $ref: '#/components/schemas/ActuatorEntry'
    
    ActuatorEntry:
      type: object
      properties:
        name:
          type: string
          description: The name of the entry
          example: "version"
        value:
          type: string
          description: The value of the entry
          example: "0.1.0"
    
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: HTTP status code
          example: 404
        message:
          type: string
          description: Error message
          example: "Pet with ID 1 not found"
        error_type:
          type: string
          description: Type of error
          example: "not_found"
        details:
          type: string
          description: Additional error details (if available)
    
    Data:
      type: object
      properties:
        fact:
          type: string
          description: A random cat fact
          example: "A domestic cat can run at speeds of 30 mph."
        length:
          type: integer
          description: The length of the fact in characters
          example: 43
    
    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The pet ID
          example: 10
        name:
          type: string
          description: The pet name
          example: "doggie"
        status:
          type: string
          description: Pet status in the store
          example: "available"
          enum:
            - available
            - pending
            - sold
        category:
          $ref: '#/components/schemas/Category'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Category ID
          example: 1
        name:
          type: string
          description: Category name
          example: "Dogs"
    
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Tag ID
          example: 1
        name:
          type: string
          description: Tag name
          example: "friendly"
    
    DependencyStatus:
      type: object
      properties:
        name:
          type: string
          description: The name of the dependency
          example: "cache"
        status:
          type: string
          description: The status of the dependency
          example: "up"
        details:
          type: object
          additionalProperties:
            type: string
          description: Additional details about the dependency
          example: {"enabled": "true"} 