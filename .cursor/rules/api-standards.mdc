---
description: Standards and best practices for API development
globs: src/**/routes/**/*.rs, src/**/handlers/**/*.rs, src/app/api/**/*.rs
alwaysApply: false
---
# API Standards

## Route Structure
- Base paths: /, /read, /full, /actuator
- Use kebab-case for URLs
- Prefer plural nouns for resources
- Version APIs in header, not URL

## HTTP Methods
- GET: Retrieve resources
- POST: Create resources
- PUT: Full resource update
- PATCH: Partial resource update
- DELETE: Remove resources

## Request Standards
- Use query parameters for filtering
- Use JSON for request bodies
- Validate all input data
- Support pagination where appropriate
- Include correlation IDs

## Response Standards
- Use consistent JSON structure
- Include metadata wrapper
- Support HATEOAS links
- Use standard HTTP status codes
- Include rate limit headers

## Example Response Format
```json
{
    "data": {},
    "metadata": {
        "timestamp": "2024-03-22T12:00:00Z",
        "requestId": "uuid",
        "pagination": {
            "page": 1,
            "perPage": 20,
            "total": 100
        }
    },
    "links": {
        "self": "/api/resource/123",
        "next": "/api/resource?page=2"
    }
}
```

## Security
- Validate content types
- Set security headers
- Rate limit all endpoints
- Validate authorization
- Sanitize all inputs

## Documentation
- Use OpenAPI/Swagger
- Document all parameters
- Include example requests/responses
- Document error scenarios
- Keep docs in sync with code

## Performance
- Enable compression
- Use appropriate caching
- Optimize payload size
- Support bulk operations
- Monitor response times 