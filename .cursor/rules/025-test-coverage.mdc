---
description: When working with test coverage
globs: 
alwaysApply: true
---
# Test Coverage Guidelines

## Coverage Targets
- Overall project: 80%+ code coverage
- Critical modules (auth, security, error handling): 90%+
- Public APIs and endpoints: 100% coverage
- Helper/utility functions: 70%+ coverage

## Setting Up Coverage Tracking
- We use cargo-tarpaulin for coverage tracking
- Install with: `cargo install cargo-tarpaulin`
- Run coverage check: `cargo tarpaulin --out Html`
- Coverage report will be generated as tarpaulin-report.html
- For JSON output, use: `cargo tarpaulin -o Json --output-file target/@navius-coverage.json`
- Always output to the target directory with @navius-coverage.json when running tarpaulin for JSON reports
- This JSON format enables integration with other reporting tools and prompts

## Coverage Implementation Guidelines
- Start with the happy path, then add tests for error paths
- Prioritize testing user-facing functionality and security-critical code
- Test boundary conditions (empty lists, max values, etc.)
- Don't just aim for coverage percentages - test actual behavior

## Excluding Code from Coverage
- Use `#[cfg(test)]` to mark test-only code
- Code that is difficult to test directly should be refactored to be more testable
- Extremely simple code (getters/setters) can be lower priority

## CI Integration
- Coverage is checked on every PR
- PRs that significantly decrease coverage will be flagged
- Coverage reports are uploaded as build artifacts

## Tracking Progress
- Reference the testing roadmap in docs/testing-roadmap.md
- Update coverage percentages as you implement tests
- Mark modules as "fully covered" when they meet their target percentages